.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "PFLASK" "1" "February 2015" "" ""
.
.SH "NAME"
\fBpflask\fR \- the process in the flask
.
.SH "SYNOPSIS"
\fBpflask [OPTIONS] [COMMAND [ARGS\.\.\.]]\fR
.
.SH "DESCRIPTION"
\fBpflask\fR is a simple tool for creating Linux namespace containers\. It can be used for running a command or even booting an OS inside an isolated container, created with the help of Linux namespaces\. It is similar in functionality to \fBchroot(8)\fR, although pflask provides better isolation thanks to the use of namespaces\.
.
.P
Additionally, while most other containerization solutions (LXC, systemd\-nspawn, \.\.\.) are mostly targeted at containing whole systems, pflask can also be used to contain single programs, without the need to create ad\-hoc chroots\.
.
.SH "OPTIONS"
\fB\-m, \-\-mount=<type>,<opts>\fR
.
.P
\~\~\~\~\~\~ Create a new \fI"type"\fR mount point inside the container\. See \fIMOUNT\fR\.
.
.P
\fB\-n, \-\-netif[=<opts>]\fR
.
.P
\~\~\~\~\~\~ Create a new network namespace and, optionally create/move a network interface inside the container\. See \fINETIF\fR\.
.
.P
\fB\-u, \-\-user=<user>\fR
.
.P
\~\~\~\~\~\~ Run the command as \fI"user"\fR inside the container\. If \fB`\-\-no\-userns\fR is not used, this will also create a new user namespace\.
.
.P
\fB\-r, \-\-chroot=<dir>\fR
.
.P
\~\~\~\~\~\~ Use \fI"dir"\fR as root directory inside the container\.
.
.P
\fB\-c, \-\-chdir=<dir>\fR
.
.P
\~\~\~\~\~\~ Change to \fI"dir"\fR inside the container\.
.
.P
\fB\-g, \-\-cgroup=<controller>[,<controller> \.\.\.]\fR
.
.P
\~\~\~\~\~\~ Create new cgroups in the given controllers and move the container inside them\.
.
.P
\fB\-d, \-\-detach\fR
.
.P
\~\~\~\~\~\~ Detach from terminal\.
.
.P
\fB\-a, \-\-attach=<pid>\fR
.
.P
\~\~\~\~\~\~ Attach to the \fI"pid"\fR detached process\. Only a process with the same UID of the detached process can attach to it\. To detach again press \fB^@\fR (Ctrl + @)\.
.
.P
\fB\-s, \-\-setenv=<name>=<value>[,<name>=<value> \.\.\.]\fR
.
.P
\~\~\~\~\~\~ Set additional environment variables\. It takes a comma\-separated list of variables of the form \fBname=value\fR\. This option may be used more than once\.
.
.P
\fB\-k, \-\-keepenv\fR
.
.P
\~\~\~\~\~\~ Do not clear environment (only relevant when used with \fB\-\-chroot\fR)\.
.
.P
\fB\-U, \-\-no\-userns\fR
.
.P
\~\~\~\~\~\~ Disable user namespace\.
.
.P
\fB\-M, \-\-no\-mountns\fR
.
.P
\~\~\~\~\~\~ Disable mount namespace\.
.
.P
\fB\-N, \-\-no\-netns\fR
.
.P
\~\~\~\~\~\~ Disable net namespace\.
.
.P
\fB\-I, \-\-no\-ipcns\fR
.
.P
\~\~\~\~\~\~ Disable IPC namespace\.
.
.P
\fB\-H, \-\-no\-utsns\fR
.
.P
\~\~\~\~\~\~ Disable UTS namespace\.
.
.P
\fB\-P, \-\-no\-pidns\fR
.
.P
\~\~\~\~\~\~ Disable PID namespace\.
.
.SH "MOUNT"
pflask support the following mount point types:
.
.SS "bind"
It bind mounts a directory/file to another directory/file
.
.P
Example: \fB\-\-mount=bind,/source/path,/dest/path\fR
.
.SS "bind\-ro"
Same as \fBbind\fR, but make the mount point read\-only\.
.
.P
Example: \fB\-\-mount=bind\-ro,/source/path,/dest/path\fR
.
.SS "aufs"
It stacks a directory on top of another directory using AuFS\. Note that AuFS doesn\'t support user namespaces, so \fB\-\-no\-userns\fR will also be needed\.
.
.P
Example: \fB\-\-mount=aufs,/overlay/path,/dest/path\fR
.
.SS "overlay"
Like aufs, but uses OverlayFS instead of AuFS\. It either requires Linux 3\.18 or the OverlayFS module installed\. Note that OverlayFS doesn\'t support user namespaces, so \fB\-\-no\-userns\fR will also be needed\.
.
.P
Example: \fB\-\-mount=overlay,/overlay/path,/dest/path\fR
.
.SS "tmp"
It mounts a tmpfs on a directory\.
.
.P
Example: \fB\-\-mount=tmp,/dest/path\fR
.
.SH "NETIF"
When the \fB\-\-netif\fR option is used, pflask will create a new network namespace inside the container\. If the argument is set, the following actions will be taken:
.
.SS "move and rename"
\~\~\~\~\~\~ \fB\-\-netif=<dev>,<name>\fR
.
.P
If the \fI"dev"\fR option is an existing network interface, it will be moved inside the container "as is" and renamed to \fI"name"\fR\. No additional configuration will be applied to it\.
.
.P
Example: \fB\-\-netif=vxlan0,eth0\fR
.
.SS "macvlan"
\~\~\~\~\~\~ \fB\-\-netif=macvlan,<master>,<name>\fR
.
.P
If the \fI"macvlan"\fR option is used, a new network interface of type \fBmacvlan\fR will be created using \fI"master"\fR as master interface, moved inside the container and renamed to \fI"name"\fR\. No additional configuration will be applied to it\.
.
.P
Example: \fB\-\-netif=macvlan,eth0,eth0\fR
.
.SS "veth"
\~\~\~\~\~\~ \fB\-\-netif=veth,<name_outside>,<name_inside>\fR
.
.P
If the \fI"veth"\fR option is used, a new pair of network interfaces of type \fBveth\fR will be created and one of the two moved inside the container\. The twin outside the container will be named \fI"name_outside"\fR, while the twin inside the container will be named \fI"name_inside"\fR\. No additional configuration will be applied to them\.
.
.P
Example: \fB\-\-netif=veth,veth0,eth0\fR
.
.SH "AUTHOR"
Alessandro Ghedini \fIalessandro@ghedini\.me\fR
.
.SH "COPYRIGHT"
Copyright (C) 2013 Alessandro Ghedini \fIalessandro@ghedini\.me\fR
.
.P
This program is released under the 2 clause BSD license\.
